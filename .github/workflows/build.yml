name: ci

on: [push, pull_request]

jobs:
  build-macos:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Install Xolentum dependencies
      run: HOMEBREW_NO_AUTO_UPDATE=1 brew install boost hidapi zmq libpgm miniupnpc ldns expat libunwind-headers protobuf ccache
    - name: Cache
      uses: actions/cache@v2.1.3
      with: 
        # A list of files, directories, and wildcard patterns to cache and restore
        path: .ccache
          # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } 
         # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        restore-keys: ${{ runner.os }}-${ { matrix.config.name } }-ccache- # optional
    - name: Build
      run: make -j3

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - uses: eine/setup-msys2@v0
      with:
        update: true
    - name: Install Xolentum dependencies
      run: msys2do pacman -S --needed --noconfirm mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-hidapi mingw-w64-x86_64-protobuf-c mingw-w64-x86_64-libusb git
    - name: Build
      run: msys2do make release-static-win64 -j2

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Remove bundled boost
      run: sudo rm -rf /usr/local/share/boost
    - name: Set apt conf
      run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    - name: Update apt
      run: sudo apt update
    - name: Install Xolentum dependencies
      run: sudo apt -y install build-essential cmake ccache libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libnorm-dev libusb-1.0-0-dev libpgm-dev libprotobuf-dev protobuf-compiler
    - name: Cache
      uses: actions/cache@v2.1.3
      with: 
        # A list of files, directories, and wildcard patterns to cache and restore
        path: .ccache
          # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } 
         # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        restore-keys: ${{ runner.os }}-${ { matrix.config.name } }-ccache- # optional
    - name: Build
      run: make -j3

  libwallet-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Remove bundled boost
      run: sudo rm -rf /usr/local/share/boost
    - name: Set apt conf
      run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    - name: Update apt
      run: sudo apt update
    - name: Install Xolentum dependencies
      run: sudo apt -y install build-essential cmake ccache libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libnorm-dev libusb-1.0-0-dev libpgm-dev libprotobuf-dev protobuf-compiler
    - name: Cache
      uses: actions/cache@v2.1.3
      with: 
        # A list of files, directories, and wildcard patterns to cache and restore
        path: .ccache
          # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${ { matrix.config.name } }-ccache-wallet-${ { steps.ccache_cache_timestamp.outputs.timestamp } 
         # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        restore-keys: |
          ${{ runner.os }}-${ { matrix.config.name } }-ccache-wallet- # optional
          ${{ runner.os }}-${ { matrix.config.name } }-ccache
    - name: Build
      run: cmake -DBUILD_GUI_DEPS=ON && make -j3

  test-ubuntu:
    needs: build-ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Remove bundled boost
      run: sudo rm -rf /usr/local/share/boost
    - name: Set apt conf
      run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    - name: Update apt
      run: sudo apt update
    - name: Install Xolentum dependencies
      run: sudo apt -y install build-essential cmake ccache libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libnorm-dev libusb-1.0-0-dev libpgm-dev libprotobuf-dev protobuf-compiler
    - name: Cache
      uses: actions/cache@v2.1.3
      with: 
        # A list of files, directories, and wildcard patterns to cache and restore
        path: .ccache
          # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${ { matrix.config.name } }-ccache-test${ { steps.ccache_cache_timestamp.outputs.timestamp } 
         # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        restore-keys: |
          ${{ runner.os }}-${ { matrix.config.name } }-ccache-test # optional
          ${{ runner.os }}-${ { matrix.config.name } }-ccache- # optional
    - name: Install requests
      run: pip install requests
    - name: Perform tests
      env:
        CTEST_OUTPUT_ON_FAILURE: ON
      run: make release-test -j3
